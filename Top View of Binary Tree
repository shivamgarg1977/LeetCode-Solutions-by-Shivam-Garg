//User function Template for Java

/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/

class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        if(root==null){
            return new ArrayList<>();
        }
        ArrayList<Integer> arr=new ArrayList<>();
        TreeMap<Integer,Integer> map=new TreeMap<>();
        Queue<Model> queue=new LinkedList<>();
        queue.add(new Model(root,0));
        
        while(!queue.isEmpty()){
            int size=queue.size();
            
            for(int i=0; i< size;i++){
                Model model=queue.remove();
                
                if(!map.containsKey(model.distance)) map.put(model.distance,model.node.data);
                
                if(model.node.left!=null) queue.add(new Model(model.node.left,model.distance-1));
                if(model.node.right!=null) queue.add(new Model(model.node.right,model.distance+1));
                
                
            }
            
        }
        
        for (Map.Entry<Integer, Integer> entry : map.entrySet()){
            arr.add(entry.getValue());
        }
        
        
        return arr;
        
        
    }
}

class Model{
    Node node;
    int distance;
    
    Model(Node node, int distance){
        this.node=node;
        this.distance=distance;
    }
}
