//User function Template for Java

// class Node  
// { 
//     int data; 
//     Node left, right; 
   
//     public Node(int d)  
//     { 
//         data = d; 
//         left = right = null; 
//     } 
// }

class Solution
{
	ArrayList <Integer> boundary(Node node)
	{
	    if(node==null){
	        return new ArrayList<>();
	    }
	    ArrayList<Integer> arr=new ArrayList<>();
	    if(!isLeaf(node))arr.add(node.data);
	    addLeft(node,arr);
	    inorder(node,arr);
	    addRight(node,arr);
	    
	    
	    
	    return arr;
	}
	
	void addLeft(Node node, ArrayList <Integer> arr){
	    Node curr=node.left;
	    while(curr!=null){
	        if(!isLeaf(curr))arr.add(curr.data);
	    if(curr.left!=null) curr=curr.left;
	    else curr=curr.right;
	    }
	}
	void addRight(Node node, ArrayList <Integer> arr){
	    Node curr=node.right;
	    int length=arr.size();
	    while(curr!=null){
	        if(!isLeaf(curr))arr.add(length,curr.data);
	    if(curr.right!=null) curr=curr.right;
	    else curr=curr.left;
	    }
	}
	void inorder(Node node,ArrayList<Integer> arr){
	    if(isLeaf(node)){
	        arr.add(node.data);
	        return;
	    }
	    if(node.left!=null) inorder(node.left,arr);
	    if(node.right!=null) inorder(node.right,arr);
	    
	}
	
	
	boolean isLeaf(Node node){
	    return node.left==null && node.right==null;
	}
}
