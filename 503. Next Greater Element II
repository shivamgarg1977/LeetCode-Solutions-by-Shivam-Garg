class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> stack=new Stack<>();
        int[] ans=new int[nums.length];
        for(int i=nums.length-1;i>=0;i--){
            while(!stack.isEmpty() && nums[stack.peek()]<=nums[i]){
                stack.pop();
            }
           ans[i]= stack.isEmpty() ? -1: nums[stack.peek()];
            stack.push(i);
        }
        for(int i=nums.length-1;i>=0;i--){
            while(!stack.isEmpty() && nums[stack.peek()]<=nums[i]){
                stack.pop();
            }
           ans[i]= stack.isEmpty() ? -1: nums[stack.peek()];
            stack.push(i);
        }

        return ans;
         
    }
}


//updated
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        Stack<Integer> stack=new Stack<>();
        int[] ans=new int[nums.length];
        for(int i=2*nums.length-1;i>=0;i--){
            while(!stack.isEmpty() && nums[stack.peek()]<=nums[i%nums.length]){
                stack.pop();
            }
           ans[i%nums.length]= stack.isEmpty() ? -1: nums[stack.peek()];
            stack.push(i%nums.length);
        }
        

        return ans;
         
    }
}
